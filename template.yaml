AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  A mountain bike ramp design tool

  Gets plans for kickers and rollers

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20
    Tracing: Active
  Api:
    TracingEnabled: True

Parameters:
  BucketName:
    Type: String
    Default: mtb-ramps

Resources:
  # ApiCertificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: !Sub sam-api-${Stage}.YOUR_DOMAIN.com
  #     ValidationMethod: DNS

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage

  KickerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: kicker/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          ENV: dev
          TABLE: Kicker

      Architectures:
        - x86_64
      MemorySize: 128
      Policies:
        - S3CrudPolicy: # adds this policy to the MtbRamps-KickerFunctionRole as KickerFunctionRolePolicy0
            BucketName: !Sub "${BucketName}"
      Events:
        KickerApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /kicker
            Method: get
            RestApiId:
              Ref: ApiGatewayApi
            RequestParameters:
              - method.request.querystring.angle:
                  Required: true
              - method.request.querystring.height:
                  Required: true
  # MtbRampsBucket:
  #   Type: "AWS::S3::Bucket"
  #   DeletionPolicy: "Retain"
  #   Properties:
  #     BucketName: !Sub "${BucketName}"

  # KickerTable:
  #   Type: AWS::Serverless::SimpleTable
  #   Properties:
  #     TableName: Kicker

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  KickerApi:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/kicker/"
  KickerApiFunction:
    Description: "Kicker Lambda Function ARN"
    Value: !GetAtt KickerFunction.Arn
  KickerApiFunctionIamRole:
    Description: "Implicit IAM Role created for Kicker function"
    Value: !GetAtt KickerFunctionRole.Arn
  MtbRampBucket:
    Description: "Media bucket for all output"
    Value: !Sub "${BucketName}"
